type Account = record { owner : principal; subaccount : opt vec nat8 };
type Balance = record { token : principal; owner : principal; amount : nat };
type CancelOrderErr = variant { NotAllowed; NotExistingOrder };
type Class = variant { ClassA; ClassB; ClassC };
type CompanyInformation = record {
  id : nat64;
  tokenization_info : CompanyTokenizationInfo;
  "principal" : principal;
  dao_id : opt nat64;
  legal_info : CompanyLegalDocuments;
  company_name : text;
  company_description : text;
  date_founded : text;
  location : Location;
  industry : Industry;
};
type CompanyLegalDocuments = record {
  incorporation_cert : text;
  registration_certificate : text;
  tax_information : text;
};
type CompanyTokenizationInfo = record {
  class : Class;
  valuation : float64;
  percent_to_tokenize : nat8;
  price_per_token : float64;
};
type Dao = record {
  id : nat64;
  token : opt TOKEN;
  system_params : SystemParams;
  total_shares : nat;
  accounts : opt vec Account;
  proposals : opt vec Proposal;
};
type DepositErr = variant { TransferFailure; BalanceLow };
type Industry = variant {
  HealthTech;
  MusicAndRecordingIndustry;
  Insurance;
  WasteManagement;
  LegalServices;
  RealEstate;
  FinancialServices;
  Retail;
  AerospaceAndDefense;
  Consulting;
  PetCare;
  Biotechnology;
  Nanotechnology;
  TravelAndTourism;
  CleanTechnology;
  ECommerce;
  PersonalFinance;
  Gaming;
  DigitalMarketing;
  TransportationAndLogistics;
  SoftwareAsAService;
  EnergyAndUtilities;
  ArchitectureAndDesign;
  FoodAndBeverage;
  EnvironmentalServices;
  MediaAndEntertainment;
  SportsManagement;
  ConsumerElectronics;
  FashionAndApparel;
  RenewableEnergy;
  MarketResearch;
  ArtificialIntelligenceAndMachineLearning;
  HealthcareAndPharmaceuticals;
  SocialMedia;
  VentureCapitalAndPrivateEquity;
  EventManagement;
  Cybersecurity;
  NonprofitAndPhilanthropy;
  Telecommunications;
  Agriculture;
  MobileAppDevelopment;
  GovernmentServices;
  FitnessAndWellness;
  InformationTechnology;
  HumanResources;
  Education;
  Hospitality;
  Automotive;
  Construction;
  Manufacturing;
};
type Investment = record { dao_id : nat64; tokens_owned : nat };
type Investor = record {
  id : nat64;
  "principal" : principal;
  investments : opt vec Investment;
};
type Location = record { country : text; adress : text };
type Order = record {
  id : nat32;
  to : principal;
  fromAmount : nat;
  owner : principal;
  from : principal;
  toAmount : nat;
};
type OrderPlacementErr = variant { InvalidOrder; OrderBookFull };
type Proposal = record {
  id : nat64;
  votes_no : nat;
  voters : vec principal;
  state : ProposalState;
  timestamp : nat64;
  proposer : principal;
  votes_yes : nat;
  payload : ProposalPayload;
};
type ProposalPayload = record {
  method : text;
  canister_id : principal;
  message : vec nat8;
};
type ProposalState = variant {
  Failed : text;
  Open;
  Executing;
  Rejected;
  Succeeded;
  Accepted;
};
type Result = variant { Ok : nat32; Err : CancelOrderErr };
type Result_1 = variant { Ok : nat; Err : DepositErr };
type Result_2 = variant { Ok : opt Order; Err : OrderPlacementErr };
type SystemParams = record {
  transfer_fee : nat;
  proposal_vote_threshold : nat;
  proposal_submission_deposit : nat;
};
type TOKEN = record { "principal" : principal; name : opt text };
service : (opt principal) -> {
  buy_tokens : (nat) -> ();
  cancelOrder : (nat32) -> (Result);
  clear : () -> () oneway;
  credit : (principal, principal, nat) -> () oneway;
  deposit : (principal) -> (Result_1);
  getAllBalances : () -> (vec Balance) query;
  getBalance : (principal) -> (nat) query;
  getBalances : () -> (vec Balance) query;
  getDepositAddress : () -> (vec nat8);
  getDepositAdress : () -> (vec nat8);
  getOrder : (nat32) -> (opt Order);
  getOrders : () -> (vec Order);
  getSymbol : (principal) -> (text);
  placeOrder : (principal, nat, principal, nat) -> (Result_2);
  save_dao : (Dao) -> ();
  signup_company : (CompanyInformation) -> ();
  signup_investor : (Investor) -> ();
  whoami : () -> (principal) query;
  withdraw : (principal, nat, principal) -> (Result_1);
}
